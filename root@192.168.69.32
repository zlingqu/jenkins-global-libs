apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL2RvY2tlci5kbS1haS5jbiI6eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiI3TDNjM0s1MDc3MGJhUmVlIiwiYXV0aCI6IllXUnRhVzQ2TjB3ell6TkxOVEEzTnpCaVlWSmxaUT09In19fQ==
kind: Secret
metadata:
  name: regsecret
  namespace: devops
type: kubernetes.io/dockerconfigjson

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: devops-jenkins-pv
spec:
  capacity:
    storage: 500Gi
  accessModes:
    - ReadWriteMany
  nfs:
    server: 192.168.69.32
    path: /devops
    readOnly: false
  persistentVolumeReclaimPolicy: Retain
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: jenkins-pvc
  namespace: devops
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 500Gi
  volumeName: devops-jenkins-pv
---
apiVersion: v1
kind: Service
metadata:
  name: service-jenkins-server
  namespace: devops
  labels:
    app: service-jenkins-server
spec:
  type: NodePort
  ports:
  - port: 8080  #服务暴露的端口
    protocol: TCP
    targetPort: 8080  #容器暴露的端口
    nodePort: 30080
    name: service-jenkins-server-port
  - port: 30500
    protocol: TCP
    targetPort: 30500  #容器暴露的端口
    nodePort: 30500
    name: service-jenkins-server-jnl-slave
  selector: #关联的Pod的标签
    app: deployment-jenkins-server
---
kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  name: service-jenkins-server
  namespace: devops
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
  - host: jenkins.ops.dm-ai.cn
    http:
      paths:
      - backend:
          serviceName: service-jenkins-server
          servicePort: 8080
---
apiVersion: apps/v1beta1
kind: Deployment
metadata: #资源的元数据/属性
  name: deployment-jenkins-server #资源的名字，在同一个namespace中必须唯一
  namespace: devops
spec:
  replicas: 1  #多少个副本
  template:
    metadata:
      labels:
        app: deployment-jenkins-server
    spec:
      hostAliases:
      - ip: 192.168.3.140
        hostnames:
        - sonar.ops.dm-ai.cn
      - ip: 192.168.3.221
        hostnames:
        - gitlab.dm-ai.cn
      nodeSelector:
        devops: jenkins
      tolerations:
      - key: "makeenv"
        operator: "Equal"
        value: "devops"
        effect: "NoSchedule"
      containers:
      - name: deployment-jenkins-server  #容器的名字
        image: jenkins/jenkins:2.176 #容器使用的镜像地址
#        resources:
#          limits:
#            memory: 6000Mi
#            cpu: 3000m
#          requests:
#            cpu: 3000m
#            memory: 6000Mi
        imagePullPolicy: Always # 默认值,总是拉取 pull
#        imagePullPolicy: Never # 只使用本地镜像，从不拉取
#        imagePullPolicy: IfNotPresent # 本地有则使用本地镜像,不拉取
#        command: ['npm'] #启动容器的运行命令，将覆盖容器中的Entrypoint,对应Dockefile中的ENTRYPOINT
#        args: ["start"] #启动容器的命令参数，对应Dockerfile中CMD参数

        env: #指定容器中的环境变量
        - name: TZ
          value: Asia/Shanghai
        - name: JAVA_OPTS
          value: "-server -Xms6000m -Xmx8120m"
        ports:
        - containerPort: 8080 #容器开发对外的端口
        - containerPort: 30500 #容器开发对外的端口, 修改默认的端口为30500
        volumeMounts:
        - name: jenkins-home
          mountPath: /var/jenkins_home
          subPath: jenkins_home/jenkins_server_data_home
      volumes:
      - name: jenkins-home
        persistentVolumeClaim:
          claimName: jenkins-pvc